// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/arshamalh/dockeroller/docker (interfaces: Docker)
//
// Generated by this command:
//
//	mockgen -destination mock_docker_test.go -package handlers_test github.com/arshamalh/dockeroller/docker Docker
//
// Package handlers_test is a generated GoMock package.
package handlers_test

import (
	context "context"
	io "io"
	reflect "reflect"

	entities "github.com/arshamalh/dockeroller/entities"
	filters "github.com/docker/docker/api/types/filters"
	gomock "go.uber.org/mock/gomock"
)

// MockDocker is a mock of Docker interface.
type MockDocker struct {
	ctrl     *gomock.Controller
	recorder *MockDockerMockRecorder
}

// MockDockerMockRecorder is the mock recorder for MockDocker.
type MockDockerMockRecorder struct {
	mock *MockDocker
}

// NewMockDocker creates a new mock instance.
func NewMockDocker(ctrl *gomock.Controller) *MockDocker {
	mock := &MockDocker{ctrl: ctrl}
	mock.recorder = &MockDockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocker) EXPECT() *MockDockerMockRecorder {
	return m.recorder
}

// ContainerLogs mocks base method.
func (m *MockDocker) ContainerLogs(arg0 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerLogs", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerLogs indicates an expected call of ContainerLogs.
func (mr *MockDockerMockRecorder) ContainerLogs(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerLogs", reflect.TypeOf((*MockDocker)(nil).ContainerLogs), arg0)
}

// ContainerRemove mocks base method.
func (m *MockDocker) ContainerRemove(arg0 string, arg1 *entities.ContainerRemoveForm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerRemove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerRemove indicates an expected call of ContainerRemove.
func (mr *MockDockerMockRecorder) ContainerRemove(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerRemove", reflect.TypeOf((*MockDocker)(nil).ContainerRemove), arg0, arg1)
}

// ContainerRename mocks base method.
func (m *MockDocker) ContainerRename(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerRename", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerRename indicates an expected call of ContainerRename.
func (mr *MockDockerMockRecorder) ContainerRename(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerRename", reflect.TypeOf((*MockDocker)(nil).ContainerRename), arg0, arg1)
}

// ContainerStart mocks base method.
func (m *MockDocker) ContainerStart(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStart", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerStart indicates an expected call of ContainerStart.
func (mr *MockDockerMockRecorder) ContainerStart(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStart", reflect.TypeOf((*MockDocker)(nil).ContainerStart), arg0)
}

// ContainerStats mocks base method.
func (m *MockDocker) ContainerStats(arg0 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStats", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerStats indicates an expected call of ContainerStats.
func (mr *MockDockerMockRecorder) ContainerStats(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStats", reflect.TypeOf((*MockDocker)(nil).ContainerStats), arg0)
}

// ContainerStop mocks base method.
func (m *MockDocker) ContainerStop(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerStop indicates an expected call of ContainerStop.
func (mr *MockDockerMockRecorder) ContainerStop(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStop", reflect.TypeOf((*MockDocker)(nil).ContainerStop), arg0)
}

// ContainersList mocks base method.
func (m *MockDocker) ContainersList(arg0 context.Context, arg1 filters.Args) []*entities.Container {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainersList", arg0, arg1)
	ret0, _ := ret[0].([]*entities.Container)
	return ret0
}

// ContainersList indicates an expected call of ContainersList.
func (mr *MockDockerMockRecorder) ContainersList(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainersList", reflect.TypeOf((*MockDocker)(nil).ContainersList), arg0, arg1)
}

// GetContainer mocks base method.
func (m *MockDocker) GetContainer(arg0 string) (*entities.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainer", arg0)
	ret0, _ := ret[0].(*entities.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainer indicates an expected call of GetContainer.
func (mr *MockDockerMockRecorder) GetContainer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainer", reflect.TypeOf((*MockDocker)(nil).GetContainer), arg0)
}

// ImageRemove mocks base method.
func (m *MockDocker) ImageRemove(arg0 context.Context, arg1 string, arg2, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageRemove", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImageRemove indicates an expected call of ImageRemove.
func (mr *MockDockerMockRecorder) ImageRemove(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageRemove", reflect.TypeOf((*MockDocker)(nil).ImageRemove), arg0, arg1, arg2, arg3)
}

// ImageTag mocks base method.
func (m *MockDocker) ImageTag(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageTag", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImageTag indicates an expected call of ImageTag.
func (mr *MockDockerMockRecorder) ImageTag(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageTag", reflect.TypeOf((*MockDocker)(nil).ImageTag), arg0, arg1, arg2)
}

// ImagesList mocks base method.
func (m *MockDocker) ImagesList() []*entities.Image {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImagesList")
	ret0, _ := ret[0].([]*entities.Image)
	return ret0
}

// ImagesList indicates an expected call of ImagesList.
func (mr *MockDockerMockRecorder) ImagesList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImagesList", reflect.TypeOf((*MockDocker)(nil).ImagesList))
}
